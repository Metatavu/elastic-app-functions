/* tslint:disable */
/* eslint-disable */
/**
 * Elastic App search lambda functions
 * Elastic App search lambda functions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Curation,
    CurationFromJSON,
    CurationToJSON,
} from '../models';

export interface CreateCurationRequest {
    curation: Curation;
}

export interface DeleteCurationRequest {
    id: string;
}

export interface FindCurationRequest {
    id: string;
}

export interface ListCurationsRequest {
    curationType?: string;
}

export interface UpdateCurationRequest {
    curation: Curation;
    id: string;
}

/**
 * 
 */
export class CurationsApi extends runtime.BaseAPI {

    /**
     * Creates new curation 
     * create new curation
     */
    async createCurationRaw(requestParameters: CreateCurationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Curation>> {
        if (requestParameters.curation === null || requestParameters.curation === undefined) {
            throw new runtime.RequiredError('curation','Required parameter requestParameters.curation was null or undefined when calling createCuration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/curations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CurationToJSON(requestParameters.curation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurationFromJSON(jsonValue));
    }

    /**
     * Creates new curation 
     * create new curation
     */
    async createCuration(requestParameters: CreateCurationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Curation> {
        const response = await this.createCurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes curation 
     * Deletes curation
     */
    async deleteCurationRaw(requestParameters: DeleteCurationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCuration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/curations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes curation 
     * Deletes curation
     */
    async deleteCuration(requestParameters: DeleteCurationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteCurationRaw(requestParameters, initOverrides);
    }

    /**
     * Find curation 
     * Find curation
     */
    async findCurationRaw(requestParameters: FindCurationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Curation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findCuration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/curations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurationFromJSON(jsonValue));
    }

    /**
     * Find curation 
     * Find curation
     */
    async findCuration(requestParameters: FindCurationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Curation> {
        const response = await this.findCurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists curations 
     * Lists curations
     */
    async listCurationsRaw(requestParameters: ListCurationsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Curation>>> {
        const queryParameters: any = {};

        if (requestParameters.curationType !== undefined) {
            queryParameters['curationType'] = requestParameters.curationType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/curations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CurationFromJSON));
    }

    /**
     * Lists curations 
     * Lists curations
     */
    async listCurations(requestParameters: ListCurationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Curation>> {
        const response = await this.listCurationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates curations 
     * Updates curation
     */
    async updateCurationRaw(requestParameters: UpdateCurationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Curation>> {
        if (requestParameters.curation === null || requestParameters.curation === undefined) {
            throw new runtime.RequiredError('curation','Required parameter requestParameters.curation was null or undefined when calling updateCuration.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCuration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/curations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CurationToJSON(requestParameters.curation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurationFromJSON(jsonValue));
    }

    /**
     * Updates curations 
     * Updates curation
     */
    async updateCuration(requestParameters: UpdateCurationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Curation> {
        const response = await this.updateCurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
