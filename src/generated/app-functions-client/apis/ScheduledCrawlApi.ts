/* tslint:disable */
/* eslint-disable */
/**
 * Elastic App search lambda functions
 * Elastic App search lambda functions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ScheduledCrawl,
    ScheduledCrawlFromJSON,
    ScheduledCrawlToJSON,
} from '../models';

export interface CreateScheduledCrawlRequest {
    scheduledCrawl: ScheduledCrawl;
}

export interface DeleteScheduledCrawlRequest {
    id: string;
}

export interface FindScheduledCrawlRequest {
    id: string;
}

export interface UpdateScheduledCrawlRequest {
    scheduledCrawl: ScheduledCrawl;
    id: string;
}

/**
 * 
 */
export class ScheduledCrawlApi extends runtime.BaseAPI {

    /**
     * Creates new scheduled crawl 
     * create new scheduled crawl
     */
    async createScheduledCrawlRaw(requestParameters: CreateScheduledCrawlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ScheduledCrawl>> {
        if (requestParameters.scheduledCrawl === null || requestParameters.scheduledCrawl === undefined) {
            throw new runtime.RequiredError('scheduledCrawl','Required parameter requestParameters.scheduledCrawl was null or undefined when calling createScheduledCrawl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scheduled-crawl`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduledCrawlToJSON(requestParameters.scheduledCrawl),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduledCrawlFromJSON(jsonValue));
    }

    /**
     * Creates new scheduled crawl 
     * create new scheduled crawl
     */
    async createScheduledCrawl(requestParameters: CreateScheduledCrawlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ScheduledCrawl> {
        const response = await this.createScheduledCrawlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes scheduled crawl 
     * Deletes scheduled crawl
     */
    async deleteScheduledCrawlRaw(requestParameters: DeleteScheduledCrawlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteScheduledCrawl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scheduled-crawl/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes scheduled crawl 
     * Deletes scheduled crawl
     */
    async deleteScheduledCrawl(requestParameters: DeleteScheduledCrawlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteScheduledCrawlRaw(requestParameters, initOverrides);
    }

    /**
     * Find scheduled crawl 
     * Find scheduled crawl
     */
    async findScheduledCrawlRaw(requestParameters: FindScheduledCrawlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ScheduledCrawl>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findScheduledCrawl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scheduled-crawl/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduledCrawlFromJSON(jsonValue));
    }

    /**
     * Find scheduled crawl 
     * Find scheduled crawl
     */
    async findScheduledCrawl(requestParameters: FindScheduledCrawlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ScheduledCrawl> {
        const response = await this.findScheduledCrawlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists scheduled crawls 
     * Lists scheduled crawls
     */
    async listScheduledCrawlsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<ScheduledCrawl>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scheduled-crawl`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScheduledCrawlFromJSON));
    }

    /**
     * Lists scheduled crawls 
     * Lists scheduled crawls
     */
    async listScheduledCrawls(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<ScheduledCrawl>> {
        const response = await this.listScheduledCrawlsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates scheduled crawl 
     * Updates scheduled crawl
     */
    async updateScheduledCrawlRaw(requestParameters: UpdateScheduledCrawlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ScheduledCrawl>> {
        if (requestParameters.scheduledCrawl === null || requestParameters.scheduledCrawl === undefined) {
            throw new runtime.RequiredError('scheduledCrawl','Required parameter requestParameters.scheduledCrawl was null or undefined when calling updateScheduledCrawl.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateScheduledCrawl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scheduled-crawl/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduledCrawlToJSON(requestParameters.scheduledCrawl),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduledCrawlFromJSON(jsonValue));
    }

    /**
     * Updates scheduled crawl 
     * Updates scheduled crawl
     */
    async updateScheduledCrawl(requestParameters: UpdateScheduledCrawlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ScheduledCrawl> {
        const response = await this.updateScheduledCrawlRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
