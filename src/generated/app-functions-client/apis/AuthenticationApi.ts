/* tslint:disable */
/* eslint-disable */
/**
 * Elastic App search lambda functions
 * Elastic App search lambda functions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Authentication,
    AuthenticationFromJSON,
    AuthenticationToJSON,
} from '../models';

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Create session authentication 
     * Create session authentication
     */
    async loginRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Authentication>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationFromJSON(jsonValue));
    }

    /**
     * Create session authentication 
     * Create session authentication
     */
    async login(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Authentication> {
        const response = await this.loginRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deletes session authentication 
     * Deletes session authentication
     */
    async logoutRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes session authentication 
     * Deletes session authentication
     */
    async logout(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.logoutRaw(initOverrides);
    }

}
